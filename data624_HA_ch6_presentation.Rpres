<style>

body {
  background-color:#97D8B2;
}

.reveal h1 {
  line-height: 100px;
}

.reveal td {
  vertical-align:top
}

.center-text-large p {
  font-size: 90px;
  text-align: center;
}

.reveal table {
  width:100%
}

.reveal table, .reveal table td, .reveal table th {
  border-style: none;
}

</style>

DATA 624 - Forecasting: Principles and Practice - Chapter 6
========================================================
author: John Grando & Alex Low
date: 2/5/19
autosize: true

<div class='center-text-large'>
  <p>Time Series Decomposition</p>
</div>

```{r echo=FALSE}
library(fpp2)
library(seasonal)
library(grid)
library(gridExtra)
library(zoo)
library(tseries)
library(forecast)
library(stats)

```

Overview - Time Series Decomposition
========================================================

Decomposition of data into separate parts
<table>
<tr>
<td style="vertical-align:middle;" width=15%>
<ul>
<li>Trend-cycle (Trend)</li>
<li>Seasonality</li>
<li>Remainder</li>
</ul>
</td>
<td style="vertical-align:middle;">
```{r fig.align='center', fig.width=14, echo=FALSE}
stl(elecequip, s.window = 'periodic', robust = TRUE) %>% autoplot() + 
  theme(strip.text = element_text(size = 25),
        plot.background = element_rect(fill = 'grey79'))
```
</td>
</tr>
</table>

Formulaic Representation
========================================================
<br>
- Additive
  - $y_{t} = S_{t} + T_{t} + R{t}$
- Multiplicative
  - $y_{t} = S_{t} \times T_{t} \times R{t}$
  - $y_{t} = \log{S_{t}} + \log{T_{t}} + \log{R{t}}$

Moving Averages (MA)
========================================================

MAs are used to estimate trend-cycles and are simply an average value over a set time period

<table>
<tr>
<td>
```{r fig.width=16, fig.height=7, fig.align='center', echo=FALSE}
autoplot(elecsales, series="Data") +
  autolayer(ma(elecsales,3), series="3-MA", size = 2) +
  autolayer(ma(elecsales,5), series="5-MA", size = 2) +
  autolayer(ma(elecsales,10), series="10-MA", size = 2) +
  xlab("Year") + ylab("GWh") +
  ggtitle("Annual electricity sales: South Australia") +
  scale_colour_manual(values=c("Data"="grey50", "3-MA"="blue","5-MA"="red", "10-MA"="green"),
                      breaks=c("Data","3-MA","5-MA","10-MA")) + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=40),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(strip.text = element_text(size = 25),
        plot.background = element_rect(fill = 'grey79'))
```
</td>
</tr>
</table>

Moving Averages of Moving Averages (MA #x#)
========================================================

Moving Averages of Moving Averages can even be taken to further smooth the trend.  Note, the first MA has been downshifted to a value of 4 (usually m=12 for monthly data) to show a noticable difference between curves.

<table>
<tr>
<td>
```{r echo=FALSE, warning=FALSE, fig.width=14, fig.align='center', error=FALSE}
autoplot(elecequip, series="Data") +
  autolayer(ma(elecequip, 4), series="4-MA") +
  autolayer(ma(ma(elecequip, 4), 2), series="2x4-MA") +
  xlab("Year") + ylab("New orders index") +
  ggtitle("Electrical equipment manufacturing (Euro area)") +
  scale_colour_manual(values=c("Data"="grey", "4-MA"="blue", "2x4-MA"="red"),
                      breaks=c("Data", "4-MA", "2x4-MA")) + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
```
</td>
</tr>
</table>

Seasonal Components
========================================================

Seasonal components can be calculated by averaging the detrended values for that season. For example, with monthly data, the seasonal component for March is the average of all the detrended March values in the data. These seasonal component values are then adjusted to ensure that they add to zero for additive models, and to approximately to `m` for multiplicative models

```{r fig.height=6, fig.width=18, fig.align='center', echo=FALSE}
library(seasonal)
elecequip %>% seas(x11="") -> fit
p2 <- fit %>% seasonal() %>% ggsubseriesplot() + ylab("Seasonal") + ggtitle("Seasonal Plot") + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
grid.arrange(p2, ncol=1)
```



Classical Decomposition
========================================================

<table>
<tr>
<th>Additive</th>
<th>Multiplicative</th>
</tr>
<tr>
<td>
  <ol>
    <li>Compute Trend Cycle using MA (even m: 2xm, odd m:m) where m is the seasonal period <br>$\hat{T_{t}}$</li>
    <li>Calculate detrended series by subtraction <br>$y_{t}-\hat{T_{t}}$</li>
    <li>Estimate seasonal component <br>$\hat{S_{t}}$</li>
    <li>Calculate remainder by subracting all the above from the data <br>$\hat{R_{t}} = y_{t}-\hat{T_{t}}-\hat{S_{t}}$</li>
  </ol>
</td>
<td>
  <ol>
    <li>Compute Trend Cycle using MA (even m: 2xm, odd m:m) where m is the seasonal period <br>$\hat{T_{t}}$</li>
    <li>Calculate detrended series by division <br>$\frac{y_{t}}{\hat{T_{t}}}$</li>
    <li>Estimate seasonal component <br>$\hat{S_{t}}$</li>
    <li>Calculate remainder by dividing the calculated trends from the data <br>$R_{t} = \frac{y_{t}}{\left( \hat{T_{t}}\hat{S_{t}} \right)}$</li>
  </ol>
</td>
</tr>
</table>

X11
========================================================

Similar to classical decomposition; however, has many additional steps to account for drawbacks using the classical method.

```{r fig.height=6, fig.width=19, fig.align='center', echo=FALSE}
elecequip %>% seas(x11="") -> fit
p1 <- elecequip %>% decompose(type="multiplicative") %>%
  autoplot() + xlab("Year") +
  ggtitle("Classical multiplicative decomposition") + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
p2 <- autoplot(fit) +
  ggtitle("X11 decomposition") + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
grid.arrange(p1, p2, ncol=2)
```


SEATS
========================================================

<strong>S</strong>easonal <strong>E</strong>xtraction in <strong>A</strong>RIMA <strong>T</strong>ime <strong>S</strong>eries.  Only works with quarterly and monthly data, and details of methodology beyond the scope of this book.

```{r fig.height=6, fig.width=19, fig.align='center', echo=FALSE}
elecequip %>% seas(x11="") -> fit
p1 <- elecequip %>% decompose(type="multiplicative") %>%
  autoplot() + xlab("Year") +
  ggtitle("Classical multiplicative decomposition") + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
p2 <- elecequip %>% seas() %>%
autoplot() +
  ggtitle("SEATS decomposition") + 
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
grid.arrange(p1, p2, ncol=2)
```

STL
========================================================

<strong>S</strong>easonal and <strong>T</strong>rend decomposition using <strong>L</strong>oess.  Has many advantages over other methods which inludes; handling any type of seasonality, changing seasonality over time, trend smoothness control, and robust to outliers.  However, it has some disadvantages; only additive decomposition, difficulty with calendar variations.

```{r fig.height=6, fig.width=19, fig.align='center', echo=FALSE}
elecequip %>% seas(x11="") -> fit
p1 <- elecequip %>% decompose(type="multiplicative") %>%
  autoplot() + xlab("Year") +
  ggtitle("Classical multiplicative decomposition") +
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
p2 <- elecequip %>%
  stl(t.window=13, s.window="periodic", robust=TRUE) %>%
  autoplot() +
  ggtitle("STL Decompostion") +
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
grid.arrange(p1, p2, ncol=2)
```

Forecasting
========================================================

Forecasts can be easily made using the decomposed components which can be rewritten as follows: 

<table>
<tr>
<th>Additive</th>
<th>Multiplicative</th>
</tr>
<tr>
<td>
  $y_{t}=\hat{S_{t}} + \hat{A_{t}}$<br>
  $\hat{A_{t}}=\hat{T_{t}} + \hat{R_{t}}$
</td>
<td>
  $y_{t}=\hat{S_{t}} \times \hat{A_{t}}$<br>
  $\hat{A_{t}}=\hat{T_{t}} \times \hat{R_{t}}$
</td>
</tr>
</table>

Then, the seasonal component and seasonally adjusted component can be forecast separately.  Note, It is usually assumed that the seasonal component is unchanging, or changing extremely slowly, so it is forecast by simply taking the last year of the estimated component. 

Forecasting
========================================================

```{r fig.height=8, fig.width=18, fig.align='center', echo=FALSE}
changing_t_window=11
changing_s_window=7
snaive_forecast <- snaive(elecequip)
stlf_changing_naive_robust_forecast <- stlf(elecequip, method='naive', t.window=changing_t_window, s.window=changing_s_window, robust = TRUE)
p1 <- autoplot(snaive_forecast) +
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
p2 <- autoplot(stlf_changing_naive_robust_forecast) +
  theme(axis.title = element_text(size=20),
        title = element_text(size=20),
        axis.text = element_text(size=12),
        legend.text = element_text(size=16)) + 
  theme(plot.background = element_rect(fill = 'grey79'))
grid.arrange(p1, p2, ncol=1)
```

Case Study: U.S. Unemployment Figures
========================================================

The Bureau of Labor Statistics uses seasonal adjustment when it publishes unemployment figures. It adjusts the data using the SEATS method. Below we show the decomposition of the raw data using the traditional (multiplicative method) and SEATS method.

<table>
<tr>
<td>
```{r fig.height=6, fig.width=16, fig.align='center', echo=FALSE}

unemployment <- read.ts("https://raw.githubusercontent.com/stiltsie/cuny/master/unemployment.csv", header = TRUE, sep = ",")
unemployment_ts <- ts(unemployment[1,], start = c(2015, 1), frequency = 12)

unemployment_dec <- decompose(unemployment_ts, type="multiplicative")
unemployment_dec2 <- seas(unemployment_ts)

p1 <- unemployment_ts %>% decompose(type="multiplicative") %>%
  autoplot() + xlab("Year") + ggtitle("Unemployment data: classical multiplicative decomposition")
p2 <- unemployment_ts %>% seas() %>% autoplot() + ggtitle("Unemployment data: SEATS decomposition")

grid.arrange(p1, p2, ncol=2)

```
</td>
</tr>
</table>

U.S. Unemployment Forecast
========================================================

```{r fig.height=8, fig.width=18, fig.align='center', echo=FALSE}
changing_t_window=11
changing_s_window=7
snaive_forecast <- snaive(unemployment_ts)
stlf_changing_naive_robust_forecast <- stlf(unemployment_ts, method='naive', t.window=changing_t_window, s.window=changing_s_window, robust = TRUE)
p1 <- autoplot(snaive_forecast)
p2 <- autoplot(stlf_changing_naive_robust_forecast)
grid.arrange(p1, p2, ncol=1)
```



